/*
 * Copyright (C) 2017 Kai-Chung Yan (殷啟聰)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
  }
}

subprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'java'
  apply plugin: 'maven-publish'
  apply plugin: 'org.junit.platform.gradle.plugin'
  apply plugin: 'pmd'

  group = 'chat.viska'
  version = file("${rootDir}/VERSION").text
  sourceCompatibility = 7

  repositories {
    jcenter()
  }

  dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M3")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M3")
  }

  checkstyle {
    toolVersion = '7.4'
    File styleFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    if (!styleFile.exists()) {
      mkdir "${rootDir}/config/checkstyle"
      styleFile.createNewFile()
      styleFile.write(new URL(
        'https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml'
      ).text)
    }
    config = resources.text.fromFile(styleFile)
  }

  tasks.withType(FindBugs) {
    reports {
      html.enabled = true
      xml.enabled = false
    }
  }

  publishing {
    publications {
      main(MavenPublication) {
        from components.java
      }
    }
  }
}

task javadocAll(type: Javadoc) {
  group = 'documentation'
  description = 'Generates Javadoc for the whole project.'
  def outputDir = file("${buildDir}/javadocAll")
  outputs.dir outputDir
  outputs.files "${outputDir}/**/*"
  options.links(
    'http://reactivex.io/RxJava/2.x/javadoc',
    'http://sco0ter.bitbucket.org/precis',
    'https://docs.oracle.com/javase/8/docs/api'
  )
  source(subprojects.collect { pr ->
    pr.sourceSets.main.allJava
  })
  classpath += files(subprojects.collect { pr ->
    pr.sourceSets.main.compileClasspath
  })
  destinationDir = outputDir
  title = "API Reference for libviska-java $version"
}

task clean {
  group = 'build'
  doLast {
    delete buildDir
    delete file('config/checkstyle/checkstyle.xml')
  }
}

defaultTasks 'assemble', 'javadocAll'