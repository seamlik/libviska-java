/*
 * Copyright 2017 Kai-Chung Yan (殷啟聰)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'checkstyle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'pmd'

sourceCompatibility = 8

configurations {
  checkerFrameworkChecker
}

dependencies {
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.1.0")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.1.0")
}

publishing {
  publications {
    main(MavenPublication) {
      from components.java
    }
  }
}



checkstyle {
  toolVersion = '8.8'
  File styleFile = file("${rootProject.buildDir}/config.xml")
  if (!styleFile.exists()) {
    mkdir styleFile.parent
    styleFile.createNewFile()
    styleFile.write(new URL(
        "https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-${toolVersion}/src/main/resources/google_checks.xml"
    ).text)
  }
  config = resources.text.fromFile(styleFile)
}

pmd {
  toolVersion = '6.1.0'
  consoleOutput = true
  ignoreFailures = true
  ruleSets = [
      'category/java/bestpractices.xml',
      'category/java/codestyle.xml',
      'category/java/design.xml',
      'category/java/errorprone.xml',
      'category/java/multithreading.xml',
      'category/java/performance.xml'
  ]
}

if (hasProperty('USE_CHECKER_FRAMEWORK')) {
  dependencies {
    checkerFrameworkChecker "org.checkerframework:checker:${rootProject.libraryVersions.CHECKER_FRAMEWORK}"
  }
  tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-processorpath', "${configurations.checkerFrameworkChecker.asPath}".toString(),
        "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}".toString(),
        '-processor', rootProject.checkerFrameworkProcessors.join(','),
        "-AskipUses=${rootProject.checkerFrameworkSkipUses.join('|')}".toString()
    ]
  }
}